<?php
/**
 * @file
 * Code for the FakedIn Core feature.
 */

include_once 'fakedin_core.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function fakedin_core_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'commerce_license' || $owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_commerce_license_types_list_alter().
 */
function fakedin_core_commerce_license_types_list_alter(&$types, $product) {
  // Remove the role option completely, 'fakedin' is there to replace it.
  unset($types['role']);
  // If a product type is not role-enabled, remove 'fakedin' as well.
  if (!empty($product) && !in_array($product->type, commerce_license_role_product_types())) {
    unset($types['fakedin']);
  }
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function fakedin_core_commerce_checkout_pane_info_alter(&$info) {
  $info['checkout_completion_message']['enabled'] = FALSE;
  $info['commerce_license_complete']['enabled'] = FALSE;
  $info['commerce_checkout_complete_registration']['fieldset'] = FALSE;
}

/**
 * Implements hook_drupal_goto_alter().
 */
function fakedin_core_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  global $user;

  // Redirect to the profile edit page after the customer creates his account.
  $item = menu_get_item();
  if ($path == 'user/'. $user->uid . '/orders' && $item['path'] == 'checkout/%/%') {
    $path = 'profile/' . $user->uid . '/edit';
  }
}

/**
 * Implements hook_theme().
 */
function fakedin_core_theme($existing, $type, $theme, $path)  {
  return array(
    'fakedin_core_plan_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Form builder: Returns a plan selection form.
 */
function fakedin_core_plan_form($form, &$form_state) {
  $form['#theme'] = 'fakedin_core_plan_form';
  $form['#plans'] = $plans = fakedin_core_get_plans();
  foreach ($plans as $plan) {
    $form['plan_select'][$plan->product_id] = array(
      '#type' => 'submit',
      '#value' => t('Choose !plan', array('!plan' => $plan->title)),
      '#plan_id' => $plan->product_id,
    );
  }

  return $form;
}

/**
 * Submit handler: Initiates checkout.
 */
function fakedin_core_plan_form_submit($form, &$form_state) {
  global $user;

  $plan_id = $form_state['triggering_element']['#plan_id'];
  $plan = commerce_product_load($plan_id);

  $order = commerce_order_new($user->uid, 'checkout_checkout');
  commerce_order_save($order);
  $line_item = commerce_product_line_item_new($plan, 1, $order->order_id);
  // Process the unit price through Rules so it reflects the user's actual
  // purchase price.
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
  commerce_line_item_save($line_item);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;
  $order_wrapper->save();

  $_SESSION['commerce_cart_orders'] = array($order->order_id);
  $form_state['redirect'] = 'checkout/' . $order->order_id;
}

/**
 * Returns HTML for a plan form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_fakedin_core_plan_form($variables) {
  $form = $variables['form'];

  // The first column of the header is intentionally left blank.
  $header = array('');
  $rows = array(
    array('Monthly price'),
    array('Free posts'),
    array('Additional posts'),
    array('Profile videos'),
    array(''),
  );

  $plan_index = 1;
  foreach ($form['#plans'] as $plan) {
    $plan_wrapper = entity_metadata_wrapper('commerce_product', $plan);
    $price = commerce_product_calculate_sell_price($plan);
    $formatted_price = commerce_currency_format($price['amount'], $price['currency_code']);
    $usage_price = $plan_wrapper->field_usage_product->commerce_price->value();
    $formatted_usage_price = commerce_currency_format($usage_price['amount'], $usage_price['currency_code']);

    $header[] = $plan->title;
    $rows[0][$plan_index] = $formatted_price;
    $rows[1][$plan_index] = t('@posts posts', array('@posts' => $plan_wrapper->field_free_posts_quota->value()));
    $rows[2][$plan_index] = t('@usage_price per post', array('@usage_price' => $formatted_usage_price));
    $rows[3][$plan_index] = ($plan->sku == 'PREMIUM-PLAN') ? t('Yes') : t('No');
    $rows[4][$plan_index] = drupal_render($form['plan_select'][$plan->product_id]);

    $plan_index++;
  }
  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => array('fakedin-pane-form')),
  );
  return theme('table', $variables) . drupal_render_children($form);
}

/**
 * Returns all enabled plan products.
 */
function fakedin_core_get_plans() {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', 'plan')
    ->propertyCondition('status', 1);
  $result = $query->execute();
  $product_ids = array_keys($result['commerce_product']);
  return commerce_product_load_multiple($product_ids);
}

/**
 * Implements hook_fakedin_demo_content_install().
 */
function fakedin_core_fakedin_demo_content_install() {
  module_load_include('inc', 'fakedin_core', 'fakedin_core.demo_content');
  $billing_cycle_type = entity_load_single('cl_billing_cycle_type', 'monthly');
  $products = fakedin_core_demo_products();
  foreach ($products as $product_definition) {
    // Create and save the usage product first.
    $usage_product = commerce_product_new('product');
    $usage_product_wrapper = entity_metadata_wrapper('commerce_product', $usage_product);
    $usage_product_wrapper->sku = $product_definition['usage product']['sku'];
    $usage_product_wrapper->title = $product_definition['usage product']['title'];
    $usage_product_wrapper->commerce_price->amount = $product_definition['usage product']['price'];
    $usage_product_wrapper->status = 1;
    $usage_product_wrapper->save();

    // Create the plan.
    $roles = user_roles(TRUE);
    $role_ids = array_flip($roles);
    $product = commerce_product_new('plan');
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
    $product_wrapper->sku = $product_definition['sku'];
    $product_wrapper->title = $product_definition['title'];
    $product_wrapper->commerce_price->amount = $product_definition['price'];
    $product_wrapper->field_free_posts_quota = $product_definition['free posts'];
    $product_wrapper->field_usage_product = $usage_product;
    $product_wrapper->commerce_license_type = 'fakedin';
    $product_wrapper->commerce_license_duration = 0;
    $product_wrapper->commerce_license_role = $role_ids[$product_definition['role']];
    // @todo Find out why the wrapper can't set cl_billing_cycle_type here.
    $product->cl_billing_cycle_type[LANGUAGE_NONE][0]['target_id'] = $billing_cycle_type->billing_cycle_type_id;
    $product_wrapper->cl_billing_type = 'prepaid';
    $product_wrapper->status = 1;
    $product_wrapper->save();
  }
}
